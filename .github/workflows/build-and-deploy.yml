name: Build project

on:
  workflow_dispatch: {}
  push:
    branches:
      - main
      - feature/add-cicd

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  PROJECT_PATH: .

permissions:
  id-token: write
  contents: read

jobs:
  buildForAllSupportedPlatformsWithoutWebGL:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneWindows64
          # - StandaloneLinux64
          # - iOS
          # - Android
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-
      - uses: actions/cache@v3
        with:
          path: build
          key: build-${{ matrix.targetPlatform }}
          restore-keys: build-
      - uses: game-ci/unity-builder@v2
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
      - uses: actions/upload-artifact@v3
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}

  # buildWithMac:
  #   name: Build for ${{ matrix.targetPlatform }}
  #   runs-on: macos-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       targetPlatform:
  #         - StandaloneOSX
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3
  #       with:
  #         lfs: true
  #     - uses: actions/cache@v3
  #       with:
  #         path: ${{ matrix.projectPath }}/Library
  #         key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
  #         restore-keys: |
  #           Library-${{ matrix.projectPath }}-
  #           Library-
  #     - uses: game-ci/unity-builder@v2
  #       with:
  #         targetPlatform: ${{ matrix.targetPlatform }}
  #     - name: Upload Build
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: Build-${{ matrix.targetPlatform }}
  #         path: build/${{ matrix.targetPlatform }}

  # buildWithWindows:
  #   name: Build for ${{ matrix.targetPlatform }}
  #   runs-on: windows-2019
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       targetPlatform:
  #         - StandaloneWindows
  #         - StandaloneWindows64
  #         - WSAPlayer
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3
  #       with:
  #         lfs: true
  #     - uses: actions/cache@v3
  #       with:
  #         path: ${{ matrix.projectPath }}/Library
  #         key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
  #         restore-keys: |
  #           Library-${{ matrix.projectPath }}-
  #           Library-
  #     - uses: game-ci/unity-builder@v2
  #       with:
  #         targetPlatform: ${{ matrix.targetPlatform }}
  #     - name: Upload Build
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: Build-${{ matrix.targetPlatform }}
  #         path: build/${{ matrix.targetPlatform }}

  buildForWebGL:
    name: Build for WebGL
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-WebGL
          restore-keys: Library-
      - uses: game-ci/unity-builder@v2
        with:
          targetPlatform: WebGL
      - uses: actions/upload-artifact@v3
        with:
          name: Build-WebGL
          path: build/WebGL

  deployToS3:
    needs: [buildForWebGL]
    name: Deploy to S3
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download WebGL Artifact
        uses: actions/download-artifact@v3
        with:
          name: Build-WebGL
          path: build/WebGL

      # Load credential for deploy
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          aws-region: ap-northeast-1

      # Deploy
      - name: Copy files to the test website with the AWS CLI
        run: |
          aws s3 sync ./build/WebGL/WebGL ${{ secrets.WEBGL_HOSTING_S3_BUCKET_URI }}
